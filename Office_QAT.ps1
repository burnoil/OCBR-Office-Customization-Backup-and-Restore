<# .SYNOPSIS A tool for administrators to back up and restore a user's Microsoft Office settings. #>
param(
    [Parameter(HelpMessage = "Explicitly specify a user to target, overriding auto-detection.")] [string]$UserName,
    [Parameter(HelpMessage = "Specify the action: backup or restore.")] [ValidateSet('backup', 'restore', IgnoreCase = $true)] [string]$Action,
    [Parameter(HelpMessage = "The root directory for the backup/restore files.")] [string]$Path,
    [Parameter(HelpMessage = "The specific items to process.")] [ValidateSet('RibbonUI', 'Templates', 'Signatures', 'Dictionaries', IgnoreCase = $true)] [string[]]$Items
)
# (All functions from the previous script remain exactly the same)
Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
$logDirectory = "C:\Windows\MITLL\Logs"; $logFile = Join-Path -Path $logDirectory -ChildPath "OfficeCustomizationBackup.log"; if (-not (Test-Path -Path $logDirectory)) { try { New-Item -Path $logDirectory -ItemType Directory -Force -ErrorAction Stop | Out-Null } catch { Write-Warning "Could not create log directory. Logging will be disabled."; $logFile = $null } }
$officeApps = "WINWORD", "EXCEL", "POWERPNT", "OUTLOOK"; $script:customizationPaths = $null; $script:activeUser = $null
function Get-ActiveUser { try { $explorerProcess = Get-CimInstance -ClassName Win32_Process -Filter "Name = 'explorer.exe'" -ErrorAction Stop; if (!$explorerProcess) { return $null }; $ownerInfo = $explorerProcess | ForEach-Object { $owner = Invoke-CimMethod -InputObject $_ -MethodName GetOwner; if ($owner.ReturnValue -eq 0) { [PSCustomObject]@{ Domain = $owner.Domain; User = $owner.User; SessionId = $_.SessionId } } } | Sort-Object -Property SessionId | Select-Object -First 1; if (!$ownerInfo) { return $null }; $userObject = Get-CimInstance -ClassName Win32_UserAccount -Filter "Domain = '$($ownerInfo.Domain)' AND Name = '$($ownerInfo.User)'"; $profile = Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$($userObject.SID)"; return [PSCustomObject]@{ UserName = "$($ownerInfo.Domain)\$($ownerInfo.User)"; ProfilePath = $profile.ProfileImagePath } } catch { Write-Warning "Could not determine active user: $_"; return $null } }
function Get-OfficeCustomizationPaths { param([string]$UserProfilePath); $roamingAppData = Join-Path -Path $UserProfilePath -ChildPath "AppData\Roaming"; $localAppData = Join-Path -Path $UserProfilePath -ChildPath "AppData\Local"; $paths = @{ RibbonUI = @{ Path = Join-Path $localAppData "Microsoft\Office"; Exists = $false; Filter = "*.officeUI"; Type = "File" }; Templates = @{ Path = Join-Path $roamingAppData "Microsoft\Templates"; Exists = $false; Filter = "*.dot*"; Type = "File" }; Signatures = @{ Path = Join-Path $roamingAppData "Microsoft\Signatures"; Exists = $false; Filter = "*"; Type = "Folder" }; Dictionaries = @{ Path = Join-Path $roamingAppData "Microsoft\UProof"; Exists = $false; Filter = "*.dic"; Type = "File" } }; foreach ($key in $paths.Keys) { if (Test-Path $paths[$key].Path) { if (Get-ChildItem -Path $paths[$key].Path -Filter $paths[$key].Filter -ErrorAction SilentlyContinue | Select-Object -First 1) { $paths[$key].Exists = $true } } }; return $paths }
function Write-Log { param([string]$message); if ($logFile) { "$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss')) $message" | Add-Content -Path $logFile } }
function Update-UIAndLog { param([string]$message); Write-Log $message; if ($PSBoundParameters.ContainsKey('Action')) { Write-Host $message }; if ($script:logTextBox) { $script:logTextBox.AppendText("`r`n$message"); $script:logTextBox.SelectionStart = $script:logTextBox.Text.Length; $script:logTextBox.ScrollToCaret(); $script:mainForm.Update() } }
function Start-Backup { param([string]$BackupPath, [string[]]$ItemsToBackup); Update-UIAndLog "Starting backup for user '$($script:activeUser.UserName)'..."; try { foreach ($key in $ItemsToBackup) { if ($script:customizationPaths[$key].Exists) { $sourceInfo = $script:customizationPaths[$key]; $destination = Join-Path $BackupPath $key; if (!(Test-Path $destination)) { New-Item -Path $destination -ItemType Directory -Force | Out-Null }; Update-UIAndLog "Backing up $key..."; if ($sourceInfo.Type -eq "File") { Get-ChildItem -Path $sourceInfo.Path -Filter $sourceInfo.Filter | ForEach-Object { Copy-Item -Path $_.FullName -Destination $destination -Force } } elseif ($sourceInfo.Type -eq "Folder") { Copy-Item -Path ($sourceInfo.Path + "\*") -Destination $destination -Recurse -Force } } else { Update-UIAndLog "Skipping ${key}: Not found." } }; Update-UIAndLog "Backup completed successfully!"; return $true } catch { Update-UIAndLog "ERROR during backup: $_"; return $false } }
function Start-Restore { param([string]$RestorePath, [string[]]$ItemsToRestore); $runningOfficeProcs = Get-Process -Name $officeApps -ErrorAction SilentlyContinue; if ($runningOfficeProcs) { $message = "Office apps must be closed. Close them now?"; $result = 'No'; if (!$PSBoundParameters.ContainsKey('Action')) { $result = [System.Windows.Forms.MessageBox]::Show($message, "Warning", "YesNo", "Warning") } else { Update-UIAndLog "WARNING: Office apps running. Aborting."; return $false }; if ($result -eq 'Yes') { Update-UIAndLog "Closing Office apps..."; $runningOfficeProcs | Stop-Process -Force; Start-Sleep -Seconds 2 } else { Update-UIAndLog "Restore cancelled."; return $false } }; Update-UIAndLog "Starting restore for user '$($script:activeUser.UserName)'..."; try { foreach ($key in $ItemsToRestore) { $destinationInfo = $script:customizationPaths[$key]; $source = Join-Path $RestorePath $key; if (Test-Path $source) { Update-UIAndLog "Restoring $key..."; Copy-Item -Path ($source + "\*") -Destination $destinationInfo.Path -Recurse -Force } else { Update-UIAndLog "WARNING: Source for $key not found. Skipping." } }; Update-UIAndLog "Restore completed successfully!"; return $true } catch { Update-UIAndLog "ERROR during restore: $_"; return $false } }

# --- SCRIPT EXECUTION LOGIC ---
Write-Log "--------------------------------"
if ($UserName) { try { $userObject = Get-CimInstance -ClassName Win32_UserAccount -Filter "Name = '$UserName'" -ErrorAction Stop; if ($userObject) { $profile = Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$($userObject.SID)"; $script:activeUser = [PSCustomObject]@{ UserName = $userObject.Name; ProfilePath = $profile.ProfileImagePath } } } catch { Write-Warning "Could not find specified user '$UserName'. Error: $_" } } else { $script:activeUser = Get-ActiveUser }
if (!$script:activeUser) { $errorMessage = "FATAL: Could not determine the active user profile. Cannot continue."; Update-UIAndLog $errorMessage; if (!$PSBoundParameters.ContainsKey('Action')) { [System.Windows.Forms.MessageBox]::Show($errorMessage, "Error", "OK", "Error") }; Exit 1 }
$script:customizationPaths = Get-OfficeCustomizationPaths -UserProfilePath $script:activeUser.ProfilePath

if ($PSBoundParameters.ContainsKey('Action')) {
    Update-UIAndLog "Running in command-line mode for user '$($script:activeUser.UserName)'."
    if (-not ($PSBoundParameters.ContainsKey('Path') -and $PSBoundParameters.ContainsKey('Items'))) { Update-UIAndLog "ERROR: -Action, -Path, and -Items are mandatory."; Exit 1 }
    $success = $false
    if ($Action -eq 'backup') { $success = Start-Backup -BackupPath $Path -ItemsToBackup $Items }
    elseif ($Action -eq 'restore') { $success = Start-Restore -RestorePath $Path -ItemsToRestore $Items }
    Update-UIAndLog "Command-line operation finished."
    # --- ADDED FOR AUTOMATION ---
    if ($success) { Exit 0 } else { Exit 1 }
}

# (GUI Code from here is identical and will be skipped by the command-line execution)
$script:mainForm = New-Object System.Windows.Forms.Form; $script:mainForm.Text = "Office Customization Backup & Restore"; $script:mainForm.MinimumSize = '560, 640'; $script:mainForm.Size = '580, 680'; $script:mainForm.StartPosition = "CenterScreen"; $script:mainForm.FormBorderStyle = "Sizable"
$optionsGroupBox = New-Object System.Windows.Forms.GroupBox; $optionsGroupBox.Location = '20, 20'; $optionsGroupBox.Size = '520, 80'; $optionsGroupBox.Text = "1. Select Items to Process"; $optionsGroupBox.Anchor = "Top, Left, Right"
$pathsGroupBox = New-Object System.Windows.Forms.GroupBox; $pathsGroupBox.Location = '20, 110'; $pathsGroupBox.Size = '520, 160'; $pathsGroupBox.Text = "2. Detected Paths for: $($script:activeUser.UserName)"; $pathsGroupBox.Anchor = "Top, Left, Right"
$actionGroupBox = New-Object System.Windows.Forms.GroupBox; $actionGroupBox.Location = '20, 280'; $actionGroupBox.Size = '520, 150'; $actionGroupBox.Text = "3. Perform Action"; $actionGroupBox.Anchor = "Top, Left, Right"
$logGroupBox = New-Object System.Windows.Forms.GroupBox; $logGroupBox.Location = '20, 440'; $logGroupBox.Size = '520, 160'; $logGroupBox.Text = "Activity Log"; $logGroupBox.Anchor = "Top, Bottom, Left, Right"
$chkRibbon = New-Object System.Windows.Forms.CheckBox; $chkRibbon.Text = "Ribbon/Toolbar"; $chkRibbon.Location = '20, 30'; $chkRibbon.AutoSize = $true
$chkTemplates = New-Object System.Windows.Forms.CheckBox; $chkTemplates.Text = "Templates"; $chkTemplates.Location = '180, 30'; $chkTemplates.AutoSize = $true
$chkSignatures = New-Object System.Windows.Forms.CheckBox; $chkSignatures.Text = "Signatures"; $chkSignatures.Location = '20, 55'; $chkSignatures.AutoSize = $true
$chkDictionaries = New-Object System.Windows.Forms.CheckBox; $chkDictionaries.Text = "Dictionaries"; $chkDictionaries.Location = '180, 55'; $chkDictionaries.AutoSize = $true
$optionsGroupBox.Controls.AddRange(@($chkRibbon, $chkTemplates, $chkSignatures, $chkDictionaries))
$pathDisplayTextBox = New-Object System.Windows.Forms.TextBox; $pathDisplayTextBox.Location = '15, 25'; $pathDisplayTextBox.Size = '490, 120'; $pathDisplayTextBox.Multiline = $true; $pathDisplayTextBox.ReadOnly = $true; $pathDisplayTextBox.Scrollbars = "Vertical"; $pathDisplayTextBox.Anchor = "Top, Bottom, Left, Right"; $pathDisplayTextBox.Font = "Consolas, 8.5"
$pathsGroupBox.Controls.Add($pathDisplayTextBox)
$pathLabel = New-Object System.Windows.Forms.Label; $pathLabel.Text = "Backup Location / Restore Source Path:"; $pathLabel.Location = '20, 30'; $pathLabel.AutoSize = $true
$pathTextBox = New-Object System.Windows.Forms.TextBox; $pathTextBox.Location = '20, 50'; $pathTextBox.Size = '400, 20'; $pathTextBox.Anchor = "Top, Left, Right"
$browseButton = New-Object System.Windows.Forms.Button; $browseButton.Location = '430, 48'; $browseButton.Size = '75, 23'; $browseButton.Text = "Browse..."; $browseButton.Anchor = "Top, Right"
$backupButton = New-Object System.Windows.Forms.Button; $backupButton.Location = '20, 90'; $backupButton.Size = '235, 40'; $backupButton.Text = "BACKUP"; $backupButton.Anchor = "Top, Left, Right"
$restoreButton = New-Object System.Windows.Forms.Button; $restoreButton.Location = '265, 90'; $restoreButton.Size = '240, 40'; $restoreButton.Text = "RESTORE"; $restoreButton.Anchor = "Top, Right"
$actionGroupBox.Controls.AddRange(@($pathLabel, $pathTextBox, $browseButton, $backupButton, $restoreButton))
$script:logTextBox = New-Object System.Windows.Forms.TextBox; $script:logTextBox.Location = '15, 25'; $script:logTextBox.Size = '490, 90'; $script:logTextBox.Multiline = $true; $script:logTextBox.Scrollbars = "Vertical"; $script:logTextBox.ReadOnly = $true; $script:logTextBox.Anchor = "Top, Bottom, Left, Right"
$logFileLabel = New-Object System.Windows.Forms.Label; $logFileLabel.Location = '15, 125'; $logFileLabel.Size = '490, 20'; $logFileLabel.Anchor = "Bottom, Left, Right";
$logGroupBox.Controls.AddRange(@($script:logTextBox, $logFileLabel))
$script:mainForm.Controls.AddRange(@($optionsGroupBox, $pathsGroupBox, $actionGroupBox, $logGroupBox))
$script:mainForm.Add_Load({ Update-UIAndLog "GUI started for user '$($script:activeUser.UserName)'."; $checkboxMap = @{ RibbonUI = $chkRibbon; Templates = $chkTemplates; Signatures = $chkSignatures; Dictionaries = $chkDictionaries }; $pathMessage = ""; foreach($key in $script:customizationPaths.Keys){ $pathInfo = $script:customizationPaths[$key]; $status = if ($pathInfo.Exists) { "Detected" } else { "Not Found" }; $checkboxMap[$key].Enabled = $pathInfo.Exists; $checkboxMap[$key].Checked = $pathInfo.Exists; $pathMessage += "$key`: ($status)`r`n  $($pathInfo.Path)`r`n`r`n" }; $pathDisplayTextBox.Text = $pathMessage.Trim(); if ($logFile) { $logFileLabel.Text = "Log File: $logFile" } else { $logFileLabel.Text = "Log File: Disabled (insufficient permissions)" }; Update-UIAndLog "Detection complete. Ready." })
$browseButton.Add_Click({ $folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog; if ($folderBrowser.ShowDialog() -eq "OK") { $pathTextBox.Text = $folderBrowser.SelectedPath } })
$backupButton.Add_Click({ if ([string]::IsNullOrWhiteSpace($pathTextBox.Text)) { [System.Windows.Forms.MessageBox]::Show("Select backup path.", "Error", "OK", "Error"); return }; $items = ($optionsGroupBox.Controls | Where-Object { $_ -is [System.Windows.Forms.CheckBox] -and $_.Checked } | ForEach-Object { $_.Text.Replace("/","") }); if ($items.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("Select at least one item.", "Warning", "OK", "Warning"); return }; if (Start-Backup -BackupPath $pathTextBox.Text -ItemsToBackup $items) { [System.Windows.Forms.MessageBox]::Show("Backup complete.", "Success", "OK", "Information") } else { [System.Windows.Forms.MessageBox]::Show("Error during backup. Check log.", "Error", "OK", "Error") } })
$restoreButton.Add_Click({ if ([string]::IsNullOrWhiteSpace($pathTextBox.Text)) { [System.Windows.Forms.MessageBox]::Show("Select restore path.", "Error", "OK", "Error"); return }; $items = ($optionsGroupBox.Controls | Where-Object { $_ -is [System.Windows.Forms.CheckBox] -and $_.Checked } | ForEach-Object { $_.Text.Replace("/","") }); if ($items.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("Select at least one item.", "Warning", "OK", "Warning"); return }; if (Start-Restore -RestorePath $pathTextBox.Text -ItemsToRestore $items) { [System.Windows.Forms.MessageBox]::Show("Restore complete.", "Success", "OK", "Information") } else { [System.Windows.Forms.MessageBox]::Show("Error during restore. Check log.", "Error", "OK", "Error") } })
$script:mainForm.ShowDialog(); Write-Log "Application closed."